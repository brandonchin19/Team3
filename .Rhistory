library(BSDA)
library(ezids, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(ggplot2, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(tidyverse, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
library(xtable, lib.loc = "/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
detach("package:xtable", unload = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "show", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#' Original outlierKD function by By Klodian Dhana,
#' https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/
#' Modified to have third argument for removing outliers instead of interactive prompt,
#' and after removing outlier, original df will not be changed. The function returns the a df,
#' which can be saved as original df name if desired.
#' Also added QQ-plot in the output, with options to show/hide boxplot, histogram, qqplot.
#' Check outliers, and option to remove them, save as a new dataframe.
#' @param df The dataframe.
#' @param var The variable in the dataframe to be checked for outliers
#' @param rm Boolean. Whether to remove outliers or not.
#' @param boxplt Boolean. Whether to show the boxplot, before and after outliers removed.
#' @param histogram Boolean. Whether to show the histogram, before and after outliers removed.
#' @param qqplt Boolean. Whether to show the qqplot, before and after outliers removed.
#' @return The dataframe with outliers replaced by NA if rm==TRUE, or df if nothing changed
#' @examples
#'   outlierKD2(mydf, height, FALSE, TRUE, TRUE, TRUE)
#'   mydf = outlierKD2(mydf, height, TRUE, TRUE, TRUE, TRUE)
#'   mydfnew = outlierKD2(mydf, height, TRUE)
#' @export
outlierKD2 <- function(df, var, rm=TRUE, boxplt=TRUE, histogram=TRUE, qqplt=TRUE) {
dt = df # duplicate the dataframe for potential alteration
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
colTotal <- boxplt+histogram+qqplt
par(mfrow=c(2, max(2,colTotal)), oma=c(0,0,3,0)) # fixed issue with only 0 or 1 chart selected
if (qqplt) {
qqnorm(var_name, main = "With outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="With outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="With outliers") }
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
if (qqplt) {
qqnorm(var_name, main = "Without outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="Without outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="Without outliers") }
if(colTotal > 0) {  # if no charts are wanted, skip this section
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "\n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "\n")
cat("Mean of the outliers:", round(mo, 2), "\n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "\n")
cat("Mean if we remove outliers:", round(m2, 2), "\n")
}
# response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
# if(response == "y" | response == "yes"){
if(rm){
dt[as.character(substitute(var))] <- invisible(var_name)
#assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "\n")
return(invisible(dt))
} else {
cat("Nothing changed", "\n")
return(invisible(df))
}
}
hmda<-read.csv("~/Github/Team3/2019_lar.csv")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "show", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#' Original outlierKD function by By Klodian Dhana,
#' https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/
#' Modified to have third argument for removing outliers instead of interactive prompt,
#' and after removing outlier, original df will not be changed. The function returns the a df,
#' which can be saved as original df name if desired.
#' Also added QQ-plot in the output, with options to show/hide boxplot, histogram, qqplot.
#' Check outliers, and option to remove them, save as a new dataframe.
#' @param df The dataframe.
#' @param var The variable in the dataframe to be checked for outliers
#' @param rm Boolean. Whether to remove outliers or not.
#' @param boxplt Boolean. Whether to show the boxplot, before and after outliers removed.
#' @param histogram Boolean. Whether to show the histogram, before and after outliers removed.
#' @param qqplt Boolean. Whether to show the qqplot, before and after outliers removed.
#' @return The dataframe with outliers replaced by NA if rm==TRUE, or df if nothing changed
#' @examples
#'   outlierKD2(mydf, height, FALSE, TRUE, TRUE, TRUE)
#'   mydf = outlierKD2(mydf, height, TRUE, TRUE, TRUE, TRUE)
#'   mydfnew = outlierKD2(mydf, height, TRUE)
#' @export
outlierKD2 <- function(df, var, rm=TRUE, boxplt=TRUE, histogram=TRUE, qqplt=TRUE) {
dt = df # duplicate the dataframe for potential alteration
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
colTotal <- boxplt+histogram+qqplt
par(mfrow=c(2, max(2,colTotal)), oma=c(0,0,3,0)) # fixed issue with only 0 or 1 chart selected
if (qqplt) {
qqnorm(var_name, main = "With outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="With outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="With outliers") }
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
if (qqplt) {
qqnorm(var_name, main = "Without outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="Without outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="Without outliers") }
if(colTotal > 0) {  # if no charts are wanted, skip this section
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "\n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "\n")
cat("Mean of the outliers:", round(mo, 2), "\n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "\n")
cat("Mean if we remove outliers:", round(m2, 2), "\n")
}
# response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
# if(response == "y" | response == "yes"){
if(rm){
dt[as.character(substitute(var))] <- invisible(var_name)
#assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "\n")
return(invisible(dt))
} else {
cat("Nothing changed", "\n")
return(invisible(df))
}
}
hmda<-read.csv("2019_lar.csv")
str(hmda)
nrow(hmda)
xkabledplyhead(hmda,5)
xkabledplytail(hmda,5)
hmda_ca <- subset(hmda,state_code=="CA")
str(hmda_ca)
hmda_ca <- subset(hmda_ca,business_or_commercial_purpose=="2")
str(hmda_ca)
hmda_ca <- subset(hmda_ca,occupancy_type=="1")
str(hmda_ca)
hmda_ca_final <- hmda_ca[c(10,11,12,13,22,24,39,46,50, 62,74,78)]
str(hmda_ca_final)
hmda_ca_final_1 = hmda_ca_final
hmda_ca_final_1$derived_ethnicity = factor(hmda_ca_final$derived_ethnicity)
hmda_ca_final_1$derived_race = factor(hmda_ca_final$derived_race)
hmda_ca_final_1$derived_sex = factor(hmda_ca_final$derived_sex)
hmda_ca_final_1$action_taken = factor(hmda_ca_final$action_taken)
hmda_ca_final_1$loan_amount = as.numeric(hmda_ca_final$loan_amount)
hmda_ca_final_1$interest_rate = as.numeric(hmda_ca_final$interest_rate)
hmda_ca_final_1$property_value = as.numeric(hmda_ca_final$property_value)
hmda_ca_final_1$income = as.numeric(hmda_ca_final$income)
hmda_ca_final_1$applicant_age = factor(hmda_ca_final$applicant_age)
str(hmda_ca_final_1)
library(ggplot2)
ggplot(hmda_ca_final_1,aes(x=loan_amount))+
geom_histogram(color="black", fill="purple")+
labs(title="Histogram of Loan Amount", x="Loan Amount in dollars", y="Frequency")
library(ggplot2)
ggplot(hmda_ca_final_1,aes(x=interest_rate))+
geom_histogram(color="black", fill="pink")+
labs(title="Histogram of Interest Rates", x="Interest Rates", y="Frequency")
ggplot(hmda_ca,aes(y=income))+
geom_boxplot(color="black", fill="green")+
labs(title="Boxplot of Incomes", y="Income in dollars", x="Frequency")
ggplot(hmda_ca_final_1,aes(y=property_value))+
geom_boxplot(color="black", fill="blue")+
labs(title="Boxplot of Property Values", y="Property Values in dollars", x="Frequency")
library(ggplot2)
qplot(data = hmda_ca_final_1,
x = loan_amount,
y = derived_race,
color = action_taken,
main="Loan amount and Race by Action taken")
summary(hmda_ca_final_1$interest_rate)
summary(hmda_ca_final_1$property_value)
summary(hmda_ca_final_1$income)
summary(hmda_ca_final_1$loan_amount)
qqnorm(hmda_ca_final_1$interest_rate,
main="QQ Plot of Interest Rates",
ylab="Interest Rate",
col="pink")
qqline(hmda_ca_final_1$interest_rate)
qqnorm(hmda_ca_final_1$property_value,
main="QQ Plot of Property Values",
ylab="Property Value",
col="blue")
qqline(hmda_ca_final_1$property_value)
qqnorm(hmda_ca_final_1$income,
main="QQ Plot of Income",
ylab="Income",
col="green")
qqline(hmda_ca_final_1$income)
qqnorm(hmda_ca_final_1$loan_amount,
main="QQ Plot of Loan Amount",
ylab="Loan Amount",
col="purple")
qqline(hmda_ca_final_1$loan_amount)
hmda_ca_final_no_outliers_1 <- outlierKD2(hmda_ca_final_1,interest_rate)
hmda_ca_final_no_outliers_2 <- outlierKD2(hmda_ca_final_no_outliers_1,property_value)
hmda_ca_final_no_outliers_3 <- outlierKD2(hmda_ca_final_no_outliers_2,income)
loans <- outlierKD2(hmda_ca_final_no_outliers_3,loan_amount)
qqnorm(loans$interest_rate,
main="QQ Plot of Interest Rates",
ylab="Interest Rate",
col="pink")
qqline(loans$interest_rate)
qqnorm(loans$property_value,
main="QQ Plot of Property Values",
ylab="Property Value",
col="blue")
qqline(loans$property_value)
qqnorm(loans$income,
main="QQ Plot of Income",
ylab="Income",
col="green")
qqline(loans$income)
qqnorm(loans$loan_amount,
main="QQ Plot of Loan Amount",
ylab="Loan Amount",
col="purple")
qqline(loans$loan_amount)
library(lattice)
library(ggplot2)
pairs(loans)
str(loans)
loans_all_num<-loans[5:11]
str(loans_all_num)
cor_loans<-cor(loans_all_num, use="complete.obs")
xkabledply(cor_loans)
loadPkg("corrplot")
corrplot(cor_loans)
qqnorm(hmda_ca_final_1$applicant_sex,
main="QQ Plot of Interest Rates",
ylab="Interest Rate",
col="pink")
qqline(hmda_ca_final_1$applicant_sex)
hmda_ca_final_no_outliers_test <- outlierKD2(hmda_ca_final_1,applicant_sex)
loans_all_num<-loans[4:11]
str(loans_all_num)
cor_loans<-cor(loans_all_num, use="complete.obs")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "show", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#' Original outlierKD function by By Klodian Dhana,
#' https://www.r-bloggers.com/identify-describe-plot-and-remove-the-outliers-from-the-dataset/
#' Modified to have third argument for removing outliers instead of interactive prompt,
#' and after removing outlier, original df will not be changed. The function returns the a df,
#' which can be saved as original df name if desired.
#' Also added QQ-plot in the output, with options to show/hide boxplot, histogram, qqplot.
#' Check outliers, and option to remove them, save as a new dataframe.
#' @param df The dataframe.
#' @param var The variable in the dataframe to be checked for outliers
#' @param rm Boolean. Whether to remove outliers or not.
#' @param boxplt Boolean. Whether to show the boxplot, before and after outliers removed.
#' @param histogram Boolean. Whether to show the histogram, before and after outliers removed.
#' @param qqplt Boolean. Whether to show the qqplot, before and after outliers removed.
#' @return The dataframe with outliers replaced by NA if rm==TRUE, or df if nothing changed
#' @examples
#'   outlierKD2(mydf, height, FALSE, TRUE, TRUE, TRUE)
#'   mydf = outlierKD2(mydf, height, TRUE, TRUE, TRUE, TRUE)
#'   mydfnew = outlierKD2(mydf, height, TRUE)
#' @export
outlierKD2 <- function(df, var, rm=TRUE, boxplt=TRUE, histogram=TRUE, qqplt=TRUE) {
dt = df # duplicate the dataframe for potential alteration
var_name <- eval(substitute(var),eval(dt))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
colTotal <- boxplt+histogram+qqplt
par(mfrow=c(2, max(2,colTotal)), oma=c(0,0,3,0)) # fixed issue with only 0 or 1 chart selected
if (qqplt) {
qqnorm(var_name, main = "With outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="With outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="With outliers") }
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
if (qqplt) {
qqnorm(var_name, main = "Without outliers")
qqline(var_name)
}
if (histogram) { hist(var_name, main="Without outliers", xlab=NA, ylab=NA) }
if (boxplt) { boxplot(var_name, main="Without outliers") }
if(colTotal > 0) {  # if no charts are wanted, skip this section
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
cat("Outliers identified:", na2 - na1, "\n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(var_name))*100, 1), "\n")
cat("Mean of the outliers:", round(mo, 2), "\n")
m2 <- mean(var_name, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "\n")
cat("Mean if we remove outliers:", round(m2, 2), "\n")
}
# response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
# if(response == "y" | response == "yes"){
if(rm){
dt[as.character(substitute(var))] <- invisible(var_name)
#assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
cat("Outliers successfully removed", "\n")
return(invisible(dt))
} else {
cat("Nothing changed", "\n")
return(invisible(df))
}
}
hmda<-read.csv("2019_lar.csv")
str(hmda)
nrow(hmda)
xkabledplyhead(hmda,5)
xkabledplytail(hmda,5)
hmda_ca <- subset(hmda,state_code=="CA")
str(hmda_ca)
hmda_ca <- subset(hmda_ca,business_or_commercial_purpose=="2")
str(hmda_ca)
hmda_ca <- subset(hmda_ca,occupancy_type=="1")
str(hmda_ca)
hmda_ca_final <- hmda_ca[c(10,11,12,13,22,24,39,46,50, 62,74,78)]
str(hmda_ca_final)
hmda_ca_final_1 = hmda_ca_final
hmda_ca_final_1$derived_ethnicity = factor(hmda_ca_final$derived_ethnicity)
hmda_ca_final_1$derived_race = factor(hmda_ca_final$derived_race)
hmda_ca_final_1$derived_sex = factor(hmda_ca_final$derived_sex)
#hmda_ca_final_1$action_taken = factor(hmda_ca_final$action_taken)
hmda_ca_final_1$loan_amount = as.numeric(hmda_ca_final$loan_amount)
hmda_ca_final_1$interest_rate = as.numeric(hmda_ca_final$interest_rate)
hmda_ca_final_1$property_value = as.numeric(hmda_ca_final$property_value)
hmda_ca_final_1$income = as.numeric(hmda_ca_final$income)
hmda_ca_final_1$applicant_age = factor(hmda_ca_final$applicant_age)
str(hmda_ca_final_1)
library(ggplot2)
ggplot(hmda_ca_final_1,aes(x=loan_amount))+
geom_histogram(color="black", fill="purple")+
labs(title="Histogram of Loan Amount", x="Loan Amount in dollars", y="Frequency")
library(ggplot2)
ggplot(hmda_ca_final_1,aes(x=interest_rate))+
geom_histogram(color="black", fill="pink")+
labs(title="Histogram of Interest Rates", x="Interest Rates", y="Frequency")
ggplot(hmda_ca,aes(y=income))+
geom_boxplot(color="black", fill="green")+
labs(title="Boxplot of Incomes", y="Income in dollars", x="Frequency")
ggplot(hmda_ca_final_1,aes(y=property_value))+
geom_boxplot(color="black", fill="blue")+
labs(title="Boxplot of Property Values", y="Property Values in dollars", x="Frequency")
library(ggplot2)
qplot(data = hmda_ca_final_1,
x = loan_amount,
y = derived_race,
color = action_taken,
main="Loan amount and Race by Action taken")
summary(hmda_ca_final_1$interest_rate)
summary(hmda_ca_final_1$property_value)
summary(hmda_ca_final_1$income)
summary(hmda_ca_final_1$loan_amount)
qqnorm(hmda_ca_final_1$interest_rate,
main="QQ Plot of Interest Rates",
ylab="Interest Rate",
col="pink")
qqline(hmda_ca_final_1$interest_rate)
qqnorm(hmda_ca_final_1$property_value,
main="QQ Plot of Property Values",
ylab="Property Value",
col="blue")
qqline(hmda_ca_final_1$property_value)
qqnorm(hmda_ca_final_1$income,
main="QQ Plot of Income",
ylab="Income",
col="green")
qqline(hmda_ca_final_1$income)
qqnorm(hmda_ca_final_1$loan_amount,
main="QQ Plot of Loan Amount",
ylab="Loan Amount",
col="purple")
qqline(hmda_ca_final_1$loan_amount)
hmda_ca_final_no_outliers_1 <- outlierKD2(hmda_ca_final_1,interest_rate)
hmda_ca_final_no_outliers_2 <- outlierKD2(hmda_ca_final_no_outliers_1,property_value)
hmda_ca_final_no_outliers_3 <- outlierKD2(hmda_ca_final_no_outliers_2,income)
loans <- outlierKD2(hmda_ca_final_no_outliers_3,loan_amount)
qqnorm(loans$interest_rate,
main="QQ Plot of Interest Rates",
ylab="Interest Rate",
col="pink")
qqline(loans$interest_rate)
qqnorm(loans$property_value,
main="QQ Plot of Property Values",
ylab="Property Value",
col="blue")
qqline(loans$property_value)
qqnorm(loans$income,
main="QQ Plot of Income",
ylab="Income",
col="green")
qqline(loans$income)
qqnorm(loans$loan_amount,
main="QQ Plot of Loan Amount",
ylab="Loan Amount",
col="purple")
qqline(loans$loan_amount)
library(lattice)
library(ggplot2)
pairs(loans)
str(loans)
loans_all_num<-loans[4:11]
str(loans_all_num)
cor_loans<-cor(loans_all_num, use="complete.obs")
xkabledply(cor_loans)
loadPkg("corrplot")
corrplot(cor_loans)
